#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        LinacAlbaSimulator.py
## 
## Project :     LinacAlbaSimulator
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Device server to simulate the behaviour of the Alba,s linac PLCs (siemens s7)"""

__all__ = ["LinacAlbaSimulator", "LinacAlbaSimulatorClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(LinacAlbaSimulator.additionnal_import) ENABLED START -----#
import socket
import select
import threading

import plc1,plc2,plc3,plck#memory maps
def getPlcNumber(plc_type):
    if   plc_type == "plc1": return 1
    elif plc_type == "plc2": return 2
    elif plc_type == "plc3": return 3
    elif plc_type == "plc4": return 4
    elif plc_type == "plc5": return 5
    else: return None
def getPlcPort(plc_number):
    return 2010+plc_number
def getMemoryMap(plc_number):
    if plc_number == 1:
        return plc1.memoryMap
    elif plc_number == 2:
        return plc2.memoryMap
    elif plc_number == 3:
        return plc3.memoryMap
    elif plc_number in [4,5]:
        return plck.memoryMap
    return None

BACKLOG = 1#only wait for one connection.

#----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.additionnal_import

## Device States Description
## No states for this device

class LinacAlbaSimulator (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(LinacAlbaSimulator.global_variables) ENABLED START -----#
    def listener(self):
        self.buildSocketListener()
        while not self.joinEventIsSet():
            try:
#                ready = select.select( [connection.fileno()], E,E, 0)
#                if ready[0]:
#                    recv = self.__connection.recv(256)
#                    if len(recv) != 0:
#                        print("(%d) received '%s'"%(self.Port,recv))
                self.__connection.send(self.__memoryMap.tostring())
                #print("(%d) send the memory map"%(self.Port))
                time.sleep(0.5)#FIXME: heartbeat emit
            except Exception,e:
                print("(%d) Exiting the loop due to Exception: %s"%(self.Port,e))
                try: connection.close()
                except: pass
                self.buildSocket()
                connection = self.listenAndAccept()
        connection.close()
    def buildSocketListener(self):
        self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.__socket.bind((self.Host,self.Port))
        self.__socket.listen(BACKLOG)
        self.info_stream("PLC listener prepared (%d)."%(self.Port))
        self.__connection,address = self.__socket.accept()
        print("PLC connection accepted (port %d, descriptor %d)."
              %(self.Port,self.__connection.fileno()))
    def joinEventIsSet(self):
        return self.__joinerEvent.isSet()
    def setJoinEvent(self):
        self.__joinerEvent.set()
        print("(%d) join event set"%(self.Port))
    #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        LinacAlbaSimulator.init_device(self)
        #----- PROTECTED REGION ID(LinacAlbaSimulator.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(LinacAlbaSimulator.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(LinacAlbaSimulator.init_device) ENABLED START -----#
        self.Host = '0.0.0.0'#this means for eth interface
        #self.Host = '127.0.0.1'#this means only for the loopback interface
        self.Port = getPlcPort(getPlcNumber(self.plcType))
        self.__socket = None
        self.__connection = None
        self.__joinerEvent = threading.Event()#to communicate between threads
        self.__joinerEvent.clear()
        self.__thread = threading.Thread(target=self.listener)
        self.__thread.setDaemon(True)
        self.__thread.start()
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(LinacAlbaSimulator.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.always_executed_hook

    #-----------------------------------------------------------------------------
    #    LinacAlbaSimulator read/write attribute methods
    #-----------------------------------------------------------------------------
    
    
    
        #----- PROTECTED REGION ID(LinacAlbaSimulator.initialize_dynamic_attributes) ENABLED START -----#
    def initialize_dynamic_attributes(self):
        pass
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(LinacAlbaSimulator.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    LinacAlbaSimulator command methods
    #-----------------------------------------------------------------------------
    

class LinacAlbaSimulatorClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(LinacAlbaSimulator.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`LinacAlbaSimulator.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(LinacAlbaSimulator.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LinacAlbaSimulator.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'plcType':
            [PyTango.DevString,
            "plc1,plc2,plc3,plc4,plc5",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(LinacAlbaSimulatorClass,LinacAlbaSimulator,'LinacAlbaSimulator')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
